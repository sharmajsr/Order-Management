// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    name,
    username,
    password
)
VALUES (
    $1, $2, $3, $4
) RETURNING id, name, username, password
`

type CreateUserParams struct {
	ID       interface{} `json:"id"`
	Name     string      `json:"name"`
	Username string      `json:"username"`
	Password string      `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Password,
	)
	return err
}

const updateNameOfUser = `-- name: UpdateNameOfUser :exec
UPDATE users
    SET 
        name = $2
    WHERE id=$1
`

type UpdateNameOfUserParams struct {
	ID   interface{} `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateNameOfUser(ctx context.Context, arg UpdateNameOfUserParams) error {
	_, err := q.db.ExecContext(ctx, updateNameOfUser, arg.ID, arg.Name)
	return err
}

const updatePasswordOfUser = `-- name: UpdatePasswordOfUser :exec
UPDATE users
    SET 
        password = $2
    WHERE id=$1
`

type UpdatePasswordOfUserParams struct {
	ID       interface{} `json:"id"`
	Password string      `json:"password"`
}

func (q *Queries) UpdatePasswordOfUser(ctx context.Context, arg UpdatePasswordOfUserParams) error {
	_, err := q.db.ExecContext(ctx, updatePasswordOfUser, arg.ID, arg.Password)
	return err
}

const userById = `-- name: UserById :one
SELECT id, name, username, password FROM users WHERE id = $1
`

func (q *Queries) UserById(ctx context.Context, id interface{}) (User, error) {
	row := q.db.QueryRowContext(ctx, userById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const users = `-- name: Users :many
SELECT id, name, username, password FROM users
`

func (q *Queries) Users(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, users)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
