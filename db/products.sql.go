// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    id,
    price,
    details,
    quantity_available
)
VALUES (
    $1, $2, $3, $4
) RETURNING id, price, details, quantity_available
`

type CreateProductParams struct {
	ID                int64  `json:"id"`
	Price             int64  `json:"price"`
	Details           string `json:"details"`
	QuantityAvailable int32  `json:"quantity_available"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Price,
		arg.Details,
		arg.QuantityAvailable,
	)
	return err
}

const productById = `-- name: ProductById :one
SELECT id, price, details, quantity_available FROM products WHERE id = $1
`

func (q *Queries) ProductById(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, productById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Details,
		&i.QuantityAvailable,
	)
	return i, err
}

const products = `-- name: Products :many
SELECT id, price, details, quantity_available FROM products
`

func (q *Queries) Products(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, products)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Details,
			&i.QuantityAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
    SET 
        price = COALESCE($2, price),
        details = COALESCE($3, details),
        quantity_available = COALESCE($4, quantity_available)
    WHERE id=$1
`

type UpdateProductParams struct {
	ID                int64  `json:"id"`
	Price             int64  `json:"price"`
	Details           string `json:"details"`
	QuantityAvailable int32  `json:"quantity_available"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.Price,
		arg.Details,
		arg.QuantityAvailable,
	)
	return err
}
